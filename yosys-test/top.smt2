; SMT-LIBv2 description generated by Yosys 0.55+23 (git sha1 e57a2b944, aarch64-apple-darwin23.5-clang++ 18.1.8 -fPIC -O3)
; yosys-smt2-module top
(declare-sort |top_s| 0)
(declare-fun |top_is| (|top_s|) Bool)
(declare-fun |top#0| (|top_s|) Bool) ; \CLK
; yosys-smt2-input CLK 1
; yosys-smt2-clock CLK posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\CLK"], "smtname": "CLK", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\CLK"], "smtname": "CLK", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |top_n CLK| ((state |top_s|)) Bool (|top#0| state))
(declare-fun |top#1| (|top_s|) Bool) ; \RST
; yosys-smt2-input RST 1
; yosys-smt2-witness {"offset": 0, "path": ["\\RST"], "smtname": "RST", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |top_n RST| ((state |top_s|)) Bool (|top#1| state))
; yosys-smt2-witness {"offset": 0, "path": ["\\count"], "smtname": 2, "smtoffset": 0, "type": "reg", "width": 32}
(declare-fun |top#2| (|top_s|) (_ BitVec 32)) ; \count
; yosys-smt2-register count 32
(define-fun |top_n count| ((state |top_s|)) (_ BitVec 32) (|top#2| state))
(declare-fun |top#3| (|top_s|) Bool) ; \enable
; yosys-smt2-input enable 1
; yosys-smt2-witness {"offset": 0, "path": ["\\enable"], "smtname": "enable", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |top_n enable| ((state |top_s|)) Bool (|top#3| state))
; yosys-smt2-output led 8
(define-fun |top_n led| ((state |top_s|)) (_ BitVec 8) ((_ extract 23 16) (|top#2| state)))
; yosys-smt2-witness {"offset": 0, "path": ["\\state"], "smtname": 4, "smtoffset": 0, "type": "reg", "width": 8}
(declare-fun |top#4| (|top_s|) (_ BitVec 8)) ; \state
; yosys-smt2-register state 8
(define-fun |top_n state| ((state |top_s|)) (_ BitVec 8) (|top#4| state))
(declare-fun |top#5| (|top_s|) (_ BitVec 32)) ; \value
; yosys-smt2-input value 32
; yosys-smt2-witness {"offset": 0, "path": ["\\value"], "smtname": "value", "smtoffset": 0, "type": "input", "width": 32}
(define-fun |top_n value| ((state |top_s|)) (_ BitVec 32) (|top#5| state))
(define-fun |top#6| ((state |top_s|)) Bool (= (|top#4| state) #b00000010)) ; $eq$top.v:21$4_Y
(define-fun |top#7| ((state |top_s|)) (_ BitVec 8) (ite (|top#6| state) #b00000000 (|top#4| state))) ; $procmux$6_Y
(define-fun |top#8| ((state |top_s|)) Bool (= (|top#4| state) #b00000001)) ; $eq$top.v:19$3_Y
(define-fun |top#9| ((state |top_s|)) (_ BitVec 8) (ite (|top#8| state) #b00000010 (|top#7| state))) ; $procmux$9_Y
(define-fun |top#10| ((state |top_s|)) (_ BitVec 8) (ite (|top#3| state) #b00000001 (|top#4| state))) ; $procmux$12_Y
(define-fun |top#11| ((state |top_s|)) Bool (not (or  (= ((_ extract 0 0) (|top#4| state)) #b1) (= ((_ extract 1 1) (|top#4| state)) #b1) (= ((_ extract 2 2) (|top#4| state)) #b1) (= ((_ extract 3 3) (|top#4| state)) #b1) (= ((_ extract 4 4) (|top#4| state)) #b1) (= ((_ extract 5 5) (|top#4| state)) #b1) (= ((_ extract 6 6) (|top#4| state)) #b1) (= ((_ extract 7 7) (|top#4| state)) #b1)))) ; $eq$top.v:17$2_Y
(define-fun |top#12| ((state |top_s|)) (_ BitVec 8) (ite (|top#11| state) (|top#10| state) (|top#9| state))) ; $procmux$14_Y
(define-fun |top#13| ((state |top_s|)) (_ BitVec 8) (ite (|top#1| state) #b00000000 (|top#12| state))) ; $0\state[7:0]
(define-fun |top#14| ((state |top_s|)) (_ BitVec 32) (bvadd (|top#2| state) (|top#5| state))) ; $add$top.v:22$5_Y
(define-fun |top#15| ((state |top_s|)) (_ BitVec 32) (ite (|top#6| state) (|top#14| state) (|top#2| state))) ; $procmux$19_Y
(define-fun |top#16| ((state |top_s|)) (_ BitVec 32) (ite (|top#8| state) (|top#2| state) (|top#15| state))) ; $procmux$22_Y
(define-fun |top#17| ((state |top_s|)) (_ BitVec 32) (ite (|top#11| state) (|top#2| state) (|top#16| state))) ; $procmux$25_Y
(define-fun |top#18| ((state |top_s|)) (_ BitVec 32) (ite (|top#1| state) #b00000000000000000000000000000000 (|top#17| state))) ; $0\count[31:0]
(define-fun |top_a| ((state |top_s|)) Bool true)
(define-fun |top_u| ((state |top_s|)) Bool true)
(define-fun |top_i| ((state |top_s|)) Bool true)
(define-fun |top_h| ((state |top_s|)) Bool true)
(define-fun |top_t| ((state |top_s|) (next_state |top_s|)) Bool (and
  (= (|top#13| state) (|top#4| next_state)) ; $procdff$31 \state
  (= (|top#18| state) (|top#2| next_state)) ; $procdff$30 \count
)) ; end of module top
; yosys-smt2-topmod top
; end of yosys output
